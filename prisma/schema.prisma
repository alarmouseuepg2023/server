generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @db.Uuid()
  password            String    @db.VarChar(100)
  name                String    @db.VarChar(64)
  email               String    @unique @db.VarChar(100)
  loginAttempts       Int       @default(0) @map("login_attempts")
  blocked             Boolean   @default(true)
  lastFailedLoginDate DateTime? @map("last_failed_login_date") @db.Timestamp()

  devices                   Device[]
  inviter                   Invite[]                    @relation(name: "inviter")
  invitee                   Invite[]                    @relation(name: "invitee")
  alarmEvents               AlarmEvents[]
  deviceAccessControl       DeviceAccessControl[]
  waitingEmailConfirmations WaitingEmailConfirmations[]

  @@map("user")
}

model WaitingEmailConfirmations {
  pin       String   @db.VarChar(100)
  expiresIn DateTime @map("expires_in") @db.Timestamp()
  operation Int      @db.SmallInt

  userId String @map("user_id") @db.Uuid()
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, operation])
  @@map("waiting_email_confirmations")
}

model Device {
  id           String @id @db.Uuid()
  macAddress   String @unique @map("mac_address") @db.VarChar(12)
  nickname     String @db.VarChar(32)
  wifiSsid     String @map("wifi_ssid") @db.VarChar(32)
  status       Int    @db.SmallInt

  ownerId String @map("owner_id") @db.Uuid()
  owner   User   @relation(fields: [ownerId], references: [id])

  alarmEvents         AlarmEvents[]
  DeviceAccessControl DeviceAccessControl[]
  invites             Invite[]

  @@map("device")
}

model AlarmEvents {
  id        String   @id @db.Uuid()
  message   String   @db.Text()
  createdAt DateTime @db.Timestamp()

  deviceId String @map("device_id") @db.Uuid()
  device   Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  userId String? @map("user_id") @db.Uuid()
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("alarm_events")
}

model Invite {
  id         String    @id @db.Uuid()
  status     Int       @db.SmallInt()
  token      String    @db.VarChar(100)
  invitedAt  DateTime  @map("invited_at") @db.Timestamp()
  answeredAt DateTime? @map("answered_at") @db.Timestamp()

  inviteeId String @map("invitee_id") @db.Uuid()
  invitee   User   @relation(name: "invitee", fields: [inviteeId], references: [id], onDelete: Cascade)

  inviterId String @map("inviter_id") @db.Uuid()
  inviter   User   @relation(name: "inviter", fields: [inviterId], references: [id], onDelete: Cascade)

  deviceId String @map("device_id") @db.Uuid()
  device   Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@unique([inviteeId, inviterId, deviceId])
  @@map("invite")
}

model DeviceAccessControl {
  role             String    @db.VarChar(32)
  password         String    @db.VarChar(100)
  blocked          Boolean   @default(false)
  unlockAttempts   Int       @default(0) @map("unlock_attempts")
  lastFailedUnlock DateTime? @map("last_failed_unlock") @db.Timestamp()

  userId String @map("user_id") @db.Uuid()
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  deviceId String @map("device_id") @db.Uuid()
  device   Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@id([userId, deviceId])
  @@map("device_access_control")
}
